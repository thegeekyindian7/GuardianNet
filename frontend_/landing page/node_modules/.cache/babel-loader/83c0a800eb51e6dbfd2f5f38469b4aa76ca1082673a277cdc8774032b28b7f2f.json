{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sriam\\\\guardiannet-frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { PageSpinner } from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole = null,\n  allowedRoles = [],\n  redirectTo = '/login',\n  requireAuth = true\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isLoading,\n    role\n  } = useAuth();\n  const location = useLocation();\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(PageSpinner, {\n      text: \"Checking authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to login if authentication is required but user is not authenticated\n  if (requireAuth && !isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: redirectTo,\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If no role restrictions, allow access for authenticated users\n  if (!requiredRole && allowedRoles.length === 0) {\n    return children;\n  }\n\n  // Check specific role requirement\n  if (requiredRole && role !== requiredRole) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if user's role is in allowed roles\n  if (allowedRoles.length > 0 && !allowedRoles.includes(role)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  // All checks passed, render children\n  return children;\n};\n\n// Higher-order component for role-based protection\n_s(ProtectedRoute, \"dxlz8eL3/5mCKLRrUT0gQzw3tSE=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport const withRoleProtection = (Component, requiredRole) => {\n  return function ProtectedComponent(props) {\n    return /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n      requiredRole: requiredRole,\n      children: /*#__PURE__*/_jsxDEV(Component, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  };\n};\n\n// Specific role-based route components\nexport const CitizenRoute = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n  requiredRole: \"citizen\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 3\n}, this);\n_c2 = CitizenRoute;\nexport const ResponderRoute = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n  requiredRole: \"responder\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 3\n}, this);\n_c3 = ResponderRoute;\nexport const HospitalRoute = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n  requiredRole: \"hospital\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 3\n}, this);\n\n// Multiple roles allowed\n_c4 = HospitalRoute;\nexport const StaffRoute = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n  allowedRoles: ['responder', 'hospital'],\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 77,\n  columnNumber: 3\n}, this);\n_c5 = StaffRoute;\nexport default ProtectedRoute;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"CitizenRoute\");\n$RefreshReg$(_c3, \"ResponderRoute\");\n$RefreshReg$(_c4, \"HospitalRoute\");\n$RefreshReg$(_c5, \"StaffRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","PageSpinner","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredRole","allowedRoles","redirectTo","requireAuth","_s","isAuthenticated","isLoading","role","location","text","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","length","includes","_c","withRoleProtection","Component","ProtectedComponent","props","CitizenRoute","_c2","ResponderRoute","_c3","HospitalRoute","_c4","StaffRoute","_c5","$RefreshReg$"],"sources":["C:/Users/sriam/guardiannet-frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { PageSpinner } from './Spinner';\r\n\r\nconst ProtectedRoute = ({ \r\n  children, \r\n  requiredRole = null, \r\n  allowedRoles = [], \r\n  redirectTo = '/login',\r\n  requireAuth = true\r\n}) => {\r\n  const { isAuthenticated, isLoading, role } = useAuth();\r\n  const location = useLocation();\r\n\r\n  // Show loading spinner while checking authentication\r\n  if (isLoading) {\r\n    return <PageSpinner text=\"Checking authentication...\" />;\r\n  }\r\n\r\n  // Redirect to login if authentication is required but user is not authenticated\r\n  if (requireAuth && !isAuthenticated) {\r\n    return <Navigate to={redirectTo} state={{ from: location }} replace />;\r\n  }\r\n\r\n  // If no role restrictions, allow access for authenticated users\r\n  if (!requiredRole && allowedRoles.length === 0) {\r\n    return children;\r\n  }\r\n\r\n  // Check specific role requirement\r\n  if (requiredRole && role !== requiredRole) {\r\n    return <Navigate to=\"/unauthorized\" replace />;\r\n  }\r\n\r\n  // Check if user's role is in allowed roles\r\n  if (allowedRoles.length > 0 && !allowedRoles.includes(role)) {\r\n    return <Navigate to=\"/unauthorized\" replace />;\r\n  }\r\n\r\n  // All checks passed, render children\r\n  return children;\r\n};\r\n\r\n// Higher-order component for role-based protection\r\nexport const withRoleProtection = (Component, requiredRole) => {\r\n  return function ProtectedComponent(props) {\r\n    return (\r\n      <ProtectedRoute requiredRole={requiredRole}>\r\n        <Component {...props} />\r\n      </ProtectedRoute>\r\n    );\r\n  };\r\n};\r\n\r\n// Specific role-based route components\r\nexport const CitizenRoute = ({ children }) => (\r\n  <ProtectedRoute requiredRole=\"citizen\">\r\n    {children}\r\n  </ProtectedRoute>\r\n);\r\n\r\nexport const ResponderRoute = ({ children }) => (\r\n  <ProtectedRoute requiredRole=\"responder\">\r\n    {children}\r\n  </ProtectedRoute>\r\n);\r\n\r\nexport const HospitalRoute = ({ children }) => (\r\n  <ProtectedRoute requiredRole=\"hospital\">\r\n    {children}\r\n  </ProtectedRoute>\r\n);\r\n\r\n// Multiple roles allowed\r\nexport const StaffRoute = ({ children }) => (\r\n  <ProtectedRoute allowedRoles={['responder', 'hospital']}>\r\n    {children}\r\n  </ProtectedRoute>\r\n);\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}