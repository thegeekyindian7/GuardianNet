{"ast":null,"code":"import { io } from 'socket.io-client';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectInterval = 1000;\n    this.isConnected = false;\n    this.listeners = new Map();\n    this.messageQueue = [];\n    this.token = null;\n    this.role = null;\n  }\n\n  // Initialize connection\n  connect(token, role, namespace = '') {\n    this.token = token;\n    this.role = role;\n    const socketUrl = process.env.REACT_APP_WEBSOCKET_URL || 'http://localhost:5000';\n    const fullNamespace = namespace ? `/${namespace}` : '';\n    console.log(`Connecting to WebSocket: ${socketUrl}${fullNamespace}`);\n    this.socket = io(`${socketUrl}${fullNamespace}`, {\n      auth: {\n        token,\n        role\n      },\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: this.reconnectInterval,\n      forceNew: true\n    });\n    this.setupEventListeners();\n    return this.socket;\n  }\n\n  // Setup default event listeners\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.processMessageQueue();\n      this.emit('connection_status', {\n        connected: true\n      });\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('WebSocket disconnected:', reason);\n      this.isConnected = false;\n      this.emit('connection_status', {\n        connected: false,\n        reason\n      });\n    });\n    this.socket.on('connect_error', error => {\n      console.error('WebSocket connection error:', error);\n      this.reconnectAttempts++;\n      this.emit('connection_error', {\n        error: error.message,\n        attempts: this.reconnectAttempts\n      });\n    });\n    this.socket.on('reconnect', attemptNumber => {\n      console.log(`WebSocket reconnected after ${attemptNumber} attempts`);\n      this.isConnected = true;\n      this.emit('reconnected', {\n        attempts: attemptNumber\n      });\n    });\n    this.socket.on('reconnect_failed', () => {\n      console.error('WebSocket reconnection failed');\n      this.emit('reconnect_failed', {\n        maxAttempts: this.maxReconnectAttempts\n      });\n    });\n\n    // Generic message handler\n    this.socket.onAny((eventName, data) => {\n      console.log(`WebSocket event received: ${eventName}`, data);\n      this.emit(eventName, data);\n    });\n  }\n\n  // Disconnect from WebSocket\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.listeners.clear();\n      this.messageQueue = [];\n      console.log('WebSocket disconnected manually');\n    }\n  }\n\n  // Send message\n  send(event, data) {\n    if (this.isConnected && this.socket) {\n      this.socket.emit(event, data);\n      console.log(`WebSocket message sent: ${event}`, data);\n    } else {\n      // Queue message for when connection is restored\n      this.messageQueue.push({\n        event,\n        data\n      });\n      console.warn('WebSocket not connected, message queued:', {\n        event,\n        data\n      });\n    }\n  }\n\n  // Process queued messages\n  processMessageQueue() {\n    while (this.messageQueue.length > 0 && this.isConnected) {\n      const {\n        event,\n        data\n      } = this.messageQueue.shift();\n      this.send(event, data);\n    }\n  }\n\n  // Subscribe to events\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n    this.listeners.get(event).add(callback);\n\n    // Also register with socket.io if connected\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n\n    // Return unsubscribe function\n    return () => this.off(event, callback);\n  }\n\n  // Unsubscribe from events\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).delete(callback);\n      if (this.listeners.get(event).size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n\n  // Emit to local listeners\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in WebSocket event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      socket: this.socket,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n\n  // Join a room\n  joinRoom(roomId) {\n    this.send('join_room', {\n      roomId\n    });\n  }\n\n  // Leave a room\n  leaveRoom(roomId) {\n    this.send('leave_room', {\n      roomId\n    });\n  }\n\n  // Update location (for tracking)\n  updateLocation(location) {\n    this.send('location_update', {\n      location,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// Singleton instance\nconst webSocketService = new WebSocketService();\n\n// Citizen-specific WebSocket methods\nexport const citizenWebSocket = {\n  connect: (token, role) => webSocketService.connect(token, role, 'citizen'),\n  reportSOS: sosData => {\n    webSocketService.send('sos_report', sosData);\n  },\n  cancelSOS: incidentId => {\n    webSocketService.send('sos_cancel', {\n      incidentId\n    });\n  },\n  onSOSResponse: callback => webSocketService.on('sos_response', callback),\n  onResponderUpdate: callback => webSocketService.on('responder_update', callback),\n  onIncidentUpdate: callback => webSocketService.on('incident_update', callback)\n};\n\n// Responder-specific WebSocket methods\nexport const responderWebSocket = {\n  connect: (token, role) => webSocketService.connect(token, role, 'responder'),\n  updateStatus: status => {\n    webSocketService.send('responder_status', {\n      status\n    });\n  },\n  acceptIncident: incidentId => {\n    webSocketService.send('incident_accept', {\n      incidentId\n    });\n  },\n  updateIncidentStatus: (incidentId, status, notes) => {\n    webSocketService.send('incident_status_update', {\n      incidentId,\n      status,\n      notes\n    });\n  },\n  onNewAlert: callback => webSocketService.on('new_alert', callback),\n  onIncidentAssignment: callback => webSocketService.on('incident_assignment', callback),\n  onIncidentUpdate: callback => webSocketService.on('incident_update', callback)\n};\n\n// Hospital-specific WebSocket methods\nexport const hospitalWebSocket = {\n  connect: (token, role) => webSocketService.connect(token, role, 'hospital'),\n  updateBedAvailability: bedData => {\n    webSocketService.send('bed_availability_update', bedData);\n  },\n  updatePatientStatus: (patientId, status) => {\n    webSocketService.send('patient_status_update', {\n      patientId,\n      status\n    });\n  },\n  onAmbulanceUpdate: callback => webSocketService.on('ambulance_update', callback),\n  onPatientIncoming: callback => webSocketService.on('patient_incoming', callback),\n  onEmergencyAlert: callback => webSocketService.on('emergency_alert', callback)\n};\n\n// Common WebSocket methods\nexport const commonWebSocket = {\n  on: (event, callback) => webSocketService.on(event, callback),\n  off: (event, callback) => webSocketService.off(event, callback),\n  send: (event, data) => webSocketService.send(event, data),\n  getConnectionStatus: () => webSocketService.getConnectionStatus(),\n  disconnect: () => webSocketService.disconnect(),\n  updateLocation: location => webSocketService.updateLocation(location)\n};\nexport default webSocketService;","map":{"version":3,"names":["io","WebSocketService","constructor","socket","reconnectAttempts","maxReconnectAttempts","reconnectInterval","isConnected","listeners","Map","messageQueue","token","role","connect","namespace","socketUrl","process","env","REACT_APP_WEBSOCKET_URL","fullNamespace","console","log","auth","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","forceNew","setupEventListeners","on","processMessageQueue","emit","connected","reason","error","message","attempts","attemptNumber","maxAttempts","onAny","eventName","data","disconnect","clear","send","event","push","warn","length","shift","callback","has","set","Set","get","add","off","delete","size","forEach","getConnectionStatus","joinRoom","roomId","leaveRoom","updateLocation","location","timestamp","Date","toISOString","webSocketService","citizenWebSocket","reportSOS","sosData","cancelSOS","incidentId","onSOSResponse","onResponderUpdate","onIncidentUpdate","responderWebSocket","updateStatus","status","acceptIncident","updateIncidentStatus","notes","onNewAlert","onIncidentAssignment","hospitalWebSocket","updateBedAvailability","bedData","updatePatientStatus","patientId","onAmbulanceUpdate","onPatientIncoming","onEmergencyAlert","commonWebSocket"],"sources":["C:/Users/sriam/guardiannet-frontend/src/services/websocket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectInterval = 1000;\r\n    this.isConnected = false;\r\n    this.listeners = new Map();\r\n    this.messageQueue = [];\r\n    this.token = null;\r\n    this.role = null;\r\n  }\r\n\r\n  // Initialize connection\r\n  connect(token, role, namespace = '') {\r\n    this.token = token;\r\n    this.role = role;\r\n    \r\n    const socketUrl = process.env.REACT_APP_WEBSOCKET_URL || 'http://localhost:5000';\r\n    const fullNamespace = namespace ? `/${namespace}` : '';\r\n\r\n    console.log(`Connecting to WebSocket: ${socketUrl}${fullNamespace}`);\r\n\r\n    this.socket = io(`${socketUrl}${fullNamespace}`, {\r\n      auth: {\r\n        token,\r\n        role\r\n      },\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: this.maxReconnectAttempts,\r\n      reconnectionDelay: this.reconnectInterval,\r\n      forceNew: true\r\n    });\r\n\r\n    this.setupEventListeners();\r\n    return this.socket;\r\n  }\r\n\r\n  // Setup default event listeners\r\n  setupEventListeners() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('WebSocket connected');\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n      this.processMessageQueue();\r\n      this.emit('connection_status', { connected: true });\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log('WebSocket disconnected:', reason);\r\n      this.isConnected = false;\r\n      this.emit('connection_status', { connected: false, reason });\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('WebSocket connection error:', error);\r\n      this.reconnectAttempts++;\r\n      this.emit('connection_error', { error: error.message, attempts: this.reconnectAttempts });\r\n    });\r\n\r\n    this.socket.on('reconnect', (attemptNumber) => {\r\n      console.log(`WebSocket reconnected after ${attemptNumber} attempts`);\r\n      this.isConnected = true;\r\n      this.emit('reconnected', { attempts: attemptNumber });\r\n    });\r\n\r\n    this.socket.on('reconnect_failed', () => {\r\n      console.error('WebSocket reconnection failed');\r\n      this.emit('reconnect_failed', { maxAttempts: this.maxReconnectAttempts });\r\n    });\r\n\r\n    // Generic message handler\r\n    this.socket.onAny((eventName, data) => {\r\n      console.log(`WebSocket event received: ${eventName}`, data);\r\n      this.emit(eventName, data);\r\n    });\r\n  }\r\n\r\n  // Disconnect from WebSocket\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      this.listeners.clear();\r\n      this.messageQueue = [];\r\n      console.log('WebSocket disconnected manually');\r\n    }\r\n  }\r\n\r\n  // Send message\r\n  send(event, data) {\r\n    if (this.isConnected && this.socket) {\r\n      this.socket.emit(event, data);\r\n      console.log(`WebSocket message sent: ${event}`, data);\r\n    } else {\r\n      // Queue message for when connection is restored\r\n      this.messageQueue.push({ event, data });\r\n      console.warn('WebSocket not connected, message queued:', { event, data });\r\n    }\r\n  }\r\n\r\n  // Process queued messages\r\n  processMessageQueue() {\r\n    while (this.messageQueue.length > 0 && this.isConnected) {\r\n      const { event, data } = this.messageQueue.shift();\r\n      this.send(event, data);\r\n    }\r\n  }\r\n\r\n  // Subscribe to events\r\n  on(event, callback) {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, new Set());\r\n    }\r\n    this.listeners.get(event).add(callback);\r\n\r\n    // Also register with socket.io if connected\r\n    if (this.socket) {\r\n      this.socket.on(event, callback);\r\n    }\r\n\r\n    // Return unsubscribe function\r\n    return () => this.off(event, callback);\r\n  }\r\n\r\n  // Unsubscribe from events\r\n  off(event, callback) {\r\n    if (this.listeners.has(event)) {\r\n      this.listeners.get(event).delete(callback);\r\n      if (this.listeners.get(event).size === 0) {\r\n        this.listeners.delete(event);\r\n      }\r\n    }\r\n\r\n    if (this.socket) {\r\n      this.socket.off(event, callback);\r\n    }\r\n  }\r\n\r\n  // Emit to local listeners\r\n  emit(event, data) {\r\n    if (this.listeners.has(event)) {\r\n      this.listeners.get(event).forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in WebSocket event listener for ${event}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  getConnectionStatus() {\r\n    return {\r\n      connected: this.isConnected,\r\n      socket: this.socket,\r\n      reconnectAttempts: this.reconnectAttempts\r\n    };\r\n  }\r\n\r\n  // Join a room\r\n  joinRoom(roomId) {\r\n    this.send('join_room', { roomId });\r\n  }\r\n\r\n  // Leave a room\r\n  leaveRoom(roomId) {\r\n    this.send('leave_room', { roomId });\r\n  }\r\n\r\n  // Update location (for tracking)\r\n  updateLocation(location) {\r\n    this.send('location_update', {\r\n      location,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nconst webSocketService = new WebSocketService();\r\n\r\n// Citizen-specific WebSocket methods\r\nexport const citizenWebSocket = {\r\n  connect: (token, role) => webSocketService.connect(token, role, 'citizen'),\r\n  \r\n  reportSOS: (sosData) => {\r\n    webSocketService.send('sos_report', sosData);\r\n  },\r\n  \r\n  cancelSOS: (incidentId) => {\r\n    webSocketService.send('sos_cancel', { incidentId });\r\n  },\r\n  \r\n  onSOSResponse: (callback) => webSocketService.on('sos_response', callback),\r\n  onResponderUpdate: (callback) => webSocketService.on('responder_update', callback),\r\n  onIncidentUpdate: (callback) => webSocketService.on('incident_update', callback)\r\n};\r\n\r\n// Responder-specific WebSocket methods\r\nexport const responderWebSocket = {\r\n  connect: (token, role) => webSocketService.connect(token, role, 'responder'),\r\n  \r\n  updateStatus: (status) => {\r\n    webSocketService.send('responder_status', { status });\r\n  },\r\n  \r\n  acceptIncident: (incidentId) => {\r\n    webSocketService.send('incident_accept', { incidentId });\r\n  },\r\n  \r\n  updateIncidentStatus: (incidentId, status, notes) => {\r\n    webSocketService.send('incident_status_update', { incidentId, status, notes });\r\n  },\r\n  \r\n  onNewAlert: (callback) => webSocketService.on('new_alert', callback),\r\n  onIncidentAssignment: (callback) => webSocketService.on('incident_assignment', callback),\r\n  onIncidentUpdate: (callback) => webSocketService.on('incident_update', callback)\r\n};\r\n\r\n// Hospital-specific WebSocket methods\r\nexport const hospitalWebSocket = {\r\n  connect: (token, role) => webSocketService.connect(token, role, 'hospital'),\r\n  \r\n  updateBedAvailability: (bedData) => {\r\n    webSocketService.send('bed_availability_update', bedData);\r\n  },\r\n  \r\n  updatePatientStatus: (patientId, status) => {\r\n    webSocketService.send('patient_status_update', { patientId, status });\r\n  },\r\n  \r\n  onAmbulanceUpdate: (callback) => webSocketService.on('ambulance_update', callback),\r\n  onPatientIncoming: (callback) => webSocketService.on('patient_incoming', callback),\r\n  onEmergencyAlert: (callback) => webSocketService.on('emergency_alert', callback)\r\n};\r\n\r\n// Common WebSocket methods\r\nexport const commonWebSocket = {\r\n  on: (event, callback) => webSocketService.on(event, callback),\r\n  off: (event, callback) => webSocketService.off(event, callback),\r\n  send: (event, data) => webSocketService.send(event, data),\r\n  getConnectionStatus: () => webSocketService.getConnectionStatus(),\r\n  disconnect: () => webSocketService.disconnect(),\r\n  updateLocation: (location) => webSocketService.updateLocation(location)\r\n};\r\n\r\nexport default webSocketService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}