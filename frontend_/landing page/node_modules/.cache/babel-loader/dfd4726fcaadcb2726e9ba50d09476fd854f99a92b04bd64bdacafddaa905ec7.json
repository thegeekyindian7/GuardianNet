{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sriam\\\\guardiannet-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  role: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  LOGIN_START: 'LOGIN_START',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n  LOGOUT: 'LOGOUT',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  SET_LOADING: 'SET_LOADING'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.LOGIN_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        role: action.payload.role,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGIN_FAILURE:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        role: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload.error\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...initialState,\n        isLoading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state from localStorage on app start\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const token = localStorage.getItem('guardiannet_token');\n        const user = localStorage.getItem('guardiannet_user');\n        const role = localStorage.getItem('guardiannet_role');\n        if (token && user && role) {\n          dispatch({\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\n            payload: {\n              token,\n              user: JSON.parse(user),\n              role\n            }\n          });\n        } else {\n          dispatch({\n            type: AUTH_ACTIONS.SET_LOADING,\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Auth actions\n  const login = async (email, password, role) => {\n    dispatch({\n      type: AUTH_ACTIONS.LOGIN_START\n    });\n    try {\n      // DEMO MODE - Simulate successful login for any credentials\n      const mockResponse = {\n        success: true,\n        token: `demo_token_${role}_${Date.now()}`,\n        user: {\n          id: `demo_${role}_user`,\n          name: `Demo ${role.charAt(0).toUpperCase() + role.slice(1)} User`,\n          email: email || `${role}@demo.com`\n        },\n        role: role\n      };\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Store in localStorage\n      localStorage.setItem('guardiannet_token', mockResponse.token);\n      localStorage.setItem('guardiannet_user', JSON.stringify(mockResponse.user));\n      localStorage.setItem('guardiannet_role', mockResponse.role);\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\n        payload: {\n          token: mockResponse.token,\n          user: mockResponse.user,\n          role: mockResponse.role\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      dispatch({\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\n        payload: {\n          error: error.message\n        }\n      });\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('guardiannet_token');\n    localStorage.removeItem('guardiannet_user');\n    localStorage.removeItem('guardiannet_role');\n    dispatch({\n      type: AUTH_ACTIONS.LOGOUT\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    clearError,\n    AUTH_ACTIONS\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","user","token","role","isAuthenticated","isLoading","error","AUTH_ACTIONS","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","CLEAR_ERROR","SET_LOADING","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","initializeAuth","localStorage","getItem","JSON","parse","console","login","email","password","mockResponse","success","Date","now","id","name","charAt","toUpperCase","slice","Promise","resolve","setTimeout","setItem","stringify","message","logout","removeItem","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sriam/guardiannet-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  role: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst AUTH_ACTIONS = {\r\n  LOGIN_START: 'LOGIN_START',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n  LOGOUT: 'LOGOUT',\r\n  CLEAR_ERROR: 'CLEAR_ERROR',\r\n  SET_LOADING: 'SET_LOADING'\r\n};\r\n\r\n// Reducer\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case AUTH_ACTIONS.LOGIN_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null\r\n      };\r\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        role: action.payload.role,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null\r\n      };\r\n    case AUTH_ACTIONS.LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        role: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: action.payload.error\r\n      };\r\n    case AUTH_ACTIONS.LOGOUT:\r\n      return {\r\n        ...initialState,\r\n        isLoading: false\r\n      };\r\n    case AUTH_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    case AUTH_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Initialize auth state from localStorage on app start\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      try {\r\n        const token = localStorage.getItem('guardiannet_token');\r\n        const user = localStorage.getItem('guardiannet_user');\r\n        const role = localStorage.getItem('guardiannet_role');\r\n\r\n        if (token && user && role) {\r\n          dispatch({\r\n            type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n            payload: {\r\n              token,\r\n              user: JSON.parse(user),\r\n              role\r\n            }\r\n          });\r\n        } else {\r\n          dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Auth actions\r\n  const login = async (email, password, role) => {\r\n    dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n    \r\n    try {\r\n      // DEMO MODE - Simulate successful login for any credentials\r\n      const mockResponse = {\r\n        success: true,\r\n        token: `demo_token_${role}_${Date.now()}`,\r\n        user: {\r\n          id: `demo_${role}_user`,\r\n          name: `Demo ${role.charAt(0).toUpperCase() + role.slice(1)} User`,\r\n          email: email || `${role}@demo.com`\r\n        },\r\n        role: role\r\n      };\r\n\r\n      // Simulate network delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Store in localStorage\r\n      localStorage.setItem('guardiannet_token', mockResponse.token);\r\n      localStorage.setItem('guardiannet_user', JSON.stringify(mockResponse.user));\r\n      localStorage.setItem('guardiannet_role', mockResponse.role);\r\n\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n        payload: {\r\n          token: mockResponse.token,\r\n          user: mockResponse.user,\r\n          role: mockResponse.role\r\n        }\r\n      });\r\n\r\n      return { success: true };\r\n      \r\n    } catch (error) {\r\n      dispatch({\r\n        type: AUTH_ACTIONS.LOGIN_FAILURE,\r\n        payload: { error: error.message }\r\n      });\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear localStorage\r\n    localStorage.removeItem('guardiannet_token');\r\n    localStorage.removeItem('guardiannet_user');\r\n    localStorage.removeItem('guardiannet_role');\r\n    \r\n    dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n  };\r\n\r\n  const clearError = () => {\r\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    logout,\r\n    clearError,\r\n    AUTH_ACTIONS\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}