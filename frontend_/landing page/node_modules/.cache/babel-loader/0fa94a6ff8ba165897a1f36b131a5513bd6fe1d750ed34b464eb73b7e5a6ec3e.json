{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nconst useGeolocation = (options = {}) => {\n  _s();\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null,\n    accuracy: null,\n    timestamp: null\n  });\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isWatching, setIsWatching] = useState(false);\n  const [watchId, setWatchId] = useState(null);\n\n  // Default options\n  const defaultOptions = {\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 60000,\n    ...options\n  };\n\n  // Handle successful position retrieval\n  const handleSuccess = useCallback(position => {\n    const {\n      latitude,\n      longitude,\n      accuracy\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude,\n      accuracy,\n      timestamp: position.timestamp\n    });\n    setError(null);\n    setIsLoading(false);\n  }, []);\n\n  // Handle geolocation errors\n  const handleError = useCallback(error => {\n    let errorMessage = 'An unknown error occurred';\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = 'Location access denied by user';\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = 'Location information unavailable';\n        break;\n      case error.TIMEOUT:\n        errorMessage = 'Location request timed out';\n        break;\n      default:\n        errorMessage = error.message || 'Failed to get location';\n    }\n    setError(errorMessage);\n    setIsLoading(false);\n    console.error('Geolocation error:', error);\n  }, []);\n\n  // Get current position once\n  const getCurrentPosition = useCallback(() => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this browser');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, defaultOptions);\n  }, [handleSuccess, handleError, defaultOptions]);\n\n  // Start watching position\n  const watchPosition = useCallback(() => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this browser');\n      return;\n    }\n    if (isWatching) {\n      console.log('Already watching position');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setIsWatching(true);\n    const id = navigator.geolocation.watchPosition(handleSuccess, handleError, defaultOptions);\n    setWatchId(id);\n  }, [handleSuccess, handleError, defaultOptions, isWatching]);\n\n  // Stop watching position\n  const clearWatch = useCallback(() => {\n    if (watchId !== null) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n      setIsWatching(false);\n      setIsLoading(false);\n    }\n  }, [watchId]);\n\n  // Check if geolocation is supported\n  const isSupported = 'geolocation' in navigator;\n\n  // Check permission status (modern browsers)\n  const checkPermission = useCallback(async () => {\n    if (!navigator.permissions) {\n      return 'unknown';\n    }\n    try {\n      const permission = await navigator.permissions.query({\n        name: 'geolocation'\n      });\n      return permission.state;\n    } catch (error) {\n      console.warn('Unable to check geolocation permission:', error);\n      return 'unknown';\n    }\n  }, []);\n\n  // Request permission\n  const requestPermission = useCallback(async () => {\n    const permission = await checkPermission();\n    if (permission === 'denied') {\n      setError('Location permission denied. Please enable location access in browser settings.');\n      return false;\n    }\n    if (permission === 'prompt' || permission === 'unknown') {\n      // Try to get position to trigger permission prompt\n      getCurrentPosition();\n      return true;\n    }\n    return permission === 'granted';\n  }, [checkPermission, getCurrentPosition]);\n\n  // Calculate distance between two coordinates (Haversine formula)\n  const calculateDistance = useCallback((lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in kilometers\n  }, []);\n\n  // Clear watch on unmount\n  useEffect(() => {\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [watchId]);\n  return {\n    location,\n    error,\n    isLoading,\n    isWatching,\n    isSupported,\n    getCurrentPosition,\n    watchPosition,\n    clearWatch,\n    checkPermission,\n    requestPermission,\n    calculateDistance\n  };\n};\n_s(useGeolocation, \"w9RFOwE+e92qgAyNWowDoMbaWY8=\");\nexport default useGeolocation;","map":{"version":3,"names":["useState","useEffect","useCallback","useGeolocation","options","_s","location","setLocation","latitude","longitude","accuracy","timestamp","error","setError","isLoading","setIsLoading","isWatching","setIsWatching","watchId","setWatchId","defaultOptions","enableHighAccuracy","timeout","maximumAge","handleSuccess","position","coords","handleError","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","message","console","getCurrentPosition","navigator","geolocation","watchPosition","log","id","clearWatch","isSupported","checkPermission","permissions","permission","query","name","state","warn","requestPermission","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt"],"sources":["C:/Users/sriam/guardiannet-frontend/src/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n\r\nconst useGeolocation = (options = {}) => {\r\n  const [location, setLocation] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n    accuracy: null,\r\n    timestamp: null\r\n  });\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isWatching, setIsWatching] = useState(false);\r\n  const [watchId, setWatchId] = useState(null);\r\n\r\n  // Default options\r\n  const defaultOptions = {\r\n    enableHighAccuracy: true,\r\n    timeout: 10000,\r\n    maximumAge: 60000,\r\n    ...options\r\n  };\r\n\r\n  // Handle successful position retrieval\r\n  const handleSuccess = useCallback((position) => {\r\n    const { latitude, longitude, accuracy } = position.coords;\r\n    setLocation({\r\n      latitude,\r\n      longitude,\r\n      accuracy,\r\n      timestamp: position.timestamp\r\n    });\r\n    setError(null);\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Handle geolocation errors\r\n  const handleError = useCallback((error) => {\r\n    let errorMessage = 'An unknown error occurred';\r\n    \r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        errorMessage = 'Location access denied by user';\r\n        break;\r\n      case error.POSITION_UNAVAILABLE:\r\n        errorMessage = 'Location information unavailable';\r\n        break;\r\n      case error.TIMEOUT:\r\n        errorMessage = 'Location request timed out';\r\n        break;\r\n      default:\r\n        errorMessage = error.message || 'Failed to get location';\r\n    }\r\n\r\n    setError(errorMessage);\r\n    setIsLoading(false);\r\n    console.error('Geolocation error:', error);\r\n  }, []);\r\n\r\n  // Get current position once\r\n  const getCurrentPosition = useCallback(() => {\r\n    if (!navigator.geolocation) {\r\n      setError('Geolocation is not supported by this browser');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      handleSuccess,\r\n      handleError,\r\n      defaultOptions\r\n    );\r\n  }, [handleSuccess, handleError, defaultOptions]);\r\n\r\n  // Start watching position\r\n  const watchPosition = useCallback(() => {\r\n    if (!navigator.geolocation) {\r\n      setError('Geolocation is not supported by this browser');\r\n      return;\r\n    }\r\n\r\n    if (isWatching) {\r\n      console.log('Already watching position');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setIsWatching(true);\r\n\r\n    const id = navigator.geolocation.watchPosition(\r\n      handleSuccess,\r\n      handleError,\r\n      defaultOptions\r\n    );\r\n\r\n    setWatchId(id);\r\n  }, [handleSuccess, handleError, defaultOptions, isWatching]);\r\n\r\n  // Stop watching position\r\n  const clearWatch = useCallback(() => {\r\n    if (watchId !== null) {\r\n      navigator.geolocation.clearWatch(watchId);\r\n      setWatchId(null);\r\n      setIsWatching(false);\r\n      setIsLoading(false);\r\n    }\r\n  }, [watchId]);\r\n\r\n  // Check if geolocation is supported\r\n  const isSupported = 'geolocation' in navigator;\r\n\r\n  // Check permission status (modern browsers)\r\n  const checkPermission = useCallback(async () => {\r\n    if (!navigator.permissions) {\r\n      return 'unknown';\r\n    }\r\n\r\n    try {\r\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\r\n      return permission.state;\r\n    } catch (error) {\r\n      console.warn('Unable to check geolocation permission:', error);\r\n      return 'unknown';\r\n    }\r\n  }, []);\r\n\r\n  // Request permission\r\n  const requestPermission = useCallback(async () => {\r\n    const permission = await checkPermission();\r\n    \r\n    if (permission === 'denied') {\r\n      setError('Location permission denied. Please enable location access in browser settings.');\r\n      return false;\r\n    }\r\n\r\n    if (permission === 'prompt' || permission === 'unknown') {\r\n      // Try to get position to trigger permission prompt\r\n      getCurrentPosition();\r\n      return true;\r\n    }\r\n\r\n    return permission === 'granted';\r\n  }, [checkPermission, getCurrentPosition]);\r\n\r\n  // Calculate distance between two coordinates (Haversine formula)\r\n  const calculateDistance = useCallback((lat1, lon1, lat2, lon2) => {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in kilometers\r\n  }, []);\r\n\r\n  // Clear watch on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (watchId !== null) {\r\n        navigator.geolocation.clearWatch(watchId);\r\n      }\r\n    };\r\n  }, [watchId]);\r\n\r\n  return {\r\n    location,\r\n    error,\r\n    isLoading,\r\n    isWatching,\r\n    isSupported,\r\n    getCurrentPosition,\r\n    watchPosition,\r\n    clearWatch,\r\n    checkPermission,\r\n    requestPermission,\r\n    calculateDistance\r\n  };\r\n};\r\n\r\nexport default useGeolocation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}